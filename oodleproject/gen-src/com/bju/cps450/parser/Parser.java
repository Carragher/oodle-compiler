/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list);
            }
            break;
            case 8: /* reduce ACrs */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AClassDefs */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AAclassdef1ClassDef */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AAclassdef2ClassDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce AAclassdef3ClassDef */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce AAclassdef4ClassDef */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AAclassdef5ClassDef */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list);
            }
            break;
            case 15: /* reduce AAclassdef6ClassDef */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list);
            }
            break;
            case 16: /* reduce AAclassdef7ClassDef */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list);
            }
            break;
            case 17: /* reduce AAclassdef8ClassDef */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list);
            }
            break;
            case 18: /* reduce AInheritsFrom */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list);
            }
            break;
            case 19: /* reduce AAvardec1VarDec */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AAvardec2VarDec */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce AAvardec3VarDec */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list);
            }
            break;
            case 22: /* reduce AAvardec4VarDec */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list);
            }
            break;
            case 23: /* reduce ATypeDef */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list);
            }
            break;
            case 24: /* reduce ABooleanTypeName */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AIntTypeName */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AStringTypeName */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce AAarraytypename1TypeName */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list);
            }
            break;
            case 28: /* reduce AAarraytypename2TypeName */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list);
            }
            break;
            case 29: /* reduce ACustomTypeName */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list);
            }
            break;
            case 30: /* reduce ATypeInit */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce AAmethdef1MethDef */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list);
            }
            break;
            case 32: /* reduce AAmethdef2MethDef */
            {
                ArrayList<Object> list = new32();
                push(goTo(9), list);
            }
            break;
            case 33: /* reduce AAmethdef3MethDef */
            {
                ArrayList<Object> list = new33();
                push(goTo(9), list);
            }
            break;
            case 34: /* reduce AAmethdef4MethDef */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list);
            }
            break;
            case 35: /* reduce AAmethdef5MethDef */
            {
                ArrayList<Object> list = new35();
                push(goTo(9), list);
            }
            break;
            case 36: /* reduce AAmethdef6MethDef */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list);
            }
            break;
            case 37: /* reduce AAmethdef7MethDef */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list);
            }
            break;
            case 38: /* reduce AAmethdef8MethDef */
            {
                ArrayList<Object> list = new38();
                push(goTo(9), list);
            }
            break;
            case 39: /* reduce AAmethdef9MethDef */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list);
            }
            break;
            case 40: /* reduce AAmethdef10MethDef */
            {
                ArrayList<Object> list = new40();
                push(goTo(9), list);
            }
            break;
            case 41: /* reduce AAmethdef11MethDef */
            {
                ArrayList<Object> list = new41();
                push(goTo(9), list);
            }
            break;
            case 42: /* reduce AAmethdef12MethDef */
            {
                ArrayList<Object> list = new42();
                push(goTo(9), list);
            }
            break;
            case 43: /* reduce AAmethdef13MethDef */
            {
                ArrayList<Object> list = new43();
                push(goTo(9), list);
            }
            break;
            case 44: /* reduce AAmethdef14MethDef */
            {
                ArrayList<Object> list = new44();
                push(goTo(9), list);
            }
            break;
            case 45: /* reduce AAmethdef15MethDef */
            {
                ArrayList<Object> list = new45();
                push(goTo(9), list);
            }
            break;
            case 46: /* reduce AAmethdef16MethDef */
            {
                ArrayList<Object> list = new46();
                push(goTo(9), list);
            }
            break;
            case 47: /* reduce AMethType */
            {
                ArrayList<Object> list = new47();
                push(goTo(10), list);
            }
            break;
            case 48: /* reduce AAargs1Args */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list);
            }
            break;
            case 49: /* reduce AAargs2Args */
            {
                ArrayList<Object> list = new49();
                push(goTo(11), list);
            }
            break;
            case 50: /* reduce AArgzz */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list);
            }
            break;
            case 51: /* reduce AArg */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list);
            }
            break;
            case 52: /* reduce AAstmtlst1StmtLst */
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list);
            }
            break;
            case 53: /* reduce AAstmtlst2StmtLst */
            {
                ArrayList<Object> list = new53();
                push(goTo(14), list);
            }
            break;
            case 54: /* reduce AStmtEnd */
            {
                ArrayList<Object> list = new54();
                push(goTo(15), list);
            }
            break;
            case 55: /* reduce AIfStmtStmt */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list);
            }
            break;
            case 56: /* reduce ACallStmtStmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(16), list);
            }
            break;
            case 57: /* reduce AAssignStmtStmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(16), list);
            }
            break;
            case 58: /* reduce ALoopStmtStmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(16), list);
            }
            break;
            case 59: /* reduce AAifstmt1IfStmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(17), list);
            }
            break;
            case 60: /* reduce AAifstmt2IfStmt */
            {
                ArrayList<Object> list = new60();
                push(goTo(17), list);
            }
            break;
            case 61: /* reduce AAifstmt3IfStmt */
            {
                ArrayList<Object> list = new61();
                push(goTo(17), list);
            }
            break;
            case 62: /* reduce AAifstmt4IfStmt */
            {
                ArrayList<Object> list = new62();
                push(goTo(17), list);
            }
            break;
            case 63: /* reduce AAelsestmt1ElseStmt */
            {
                ArrayList<Object> list = new63();
                push(goTo(18), list);
            }
            break;
            case 64: /* reduce AAelsestmt2ElseStmt */
            {
                ArrayList<Object> list = new64();
                push(goTo(18), list);
            }
            break;
            case 65: /* reduce AAcallstmt1CallStmt */
            {
                ArrayList<Object> list = new65();
                push(goTo(19), list);
            }
            break;
            case 66: /* reduce AAcallstmt2CallStmt */
            {
                ArrayList<Object> list = new66();
                push(goTo(19), list);
            }
            break;
            case 67: /* reduce AAcallstmt3CallStmt */
            {
                ArrayList<Object> list = new67();
                push(goTo(19), list);
            }
            break;
            case 68: /* reduce AAcallstmt4CallStmt */
            {
                ArrayList<Object> list = new68();
                push(goTo(19), list);
            }
            break;
            case 69: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list);
            }
            break;
            case 70: /* reduce AAloopstmt1LoopStmt */
            {
                ArrayList<Object> list = new70();
                push(goTo(21), list);
            }
            break;
            case 71: /* reduce AAloopstmt2LoopStmt */
            {
                ArrayList<Object> list = new71();
                push(goTo(21), list);
            }
            break;
            case 72: /* reduce AAexpresslst1ExpressLst */
            {
                ArrayList<Object> list = new72();
                push(goTo(22), list);
            }
            break;
            case 73: /* reduce AAexpresslst2ExpressLst */
            {
                ArrayList<Object> list = new73();
                push(goTo(22), list);
            }
            break;
            case 74: /* reduce AExpressEnd */
            {
                ArrayList<Object> list = new74();
                push(goTo(23), list);
            }
            break;
            case 75: /* reduce AExpression */
            {
                ArrayList<Object> list = new75();
                push(goTo(24), list);
            }
            break;
            case 76: /* reduce AOrExpress1 */
            {
                ArrayList<Object> list = new76();
                push(goTo(25), list);
            }
            break;
            case 77: /* reduce AOtherExpress1 */
            {
                ArrayList<Object> list = new77();
                push(goTo(25), list);
            }
            break;
            case 78: /* reduce AAndExpress2 */
            {
                ArrayList<Object> list = new78();
                push(goTo(26), list);
            }
            break;
            case 79: /* reduce AOtherExpress2 */
            {
                ArrayList<Object> list = new79();
                push(goTo(26), list);
            }
            break;
            case 80: /* reduce AEqualsExpress3 */
            {
                ArrayList<Object> list = new80();
                push(goTo(27), list);
            }
            break;
            case 81: /* reduce AGreaterExpress3 */
            {
                ArrayList<Object> list = new81();
                push(goTo(27), list);
            }
            break;
            case 82: /* reduce AGreaterThanExpress3 */
            {
                ArrayList<Object> list = new82();
                push(goTo(27), list);
            }
            break;
            case 83: /* reduce ALesserExpress3 */
            {
                ArrayList<Object> list = new83();
                push(goTo(27), list);
            }
            break;
            case 84: /* reduce ALessThanExpress3 */
            {
                ArrayList<Object> list = new84();
                push(goTo(27), list);
            }
            break;
            case 85: /* reduce AOtherExpress3 */
            {
                ArrayList<Object> list = new85();
                push(goTo(27), list);
            }
            break;
            case 86: /* reduce AConcatExpress4 */
            {
                ArrayList<Object> list = new86();
                push(goTo(28), list);
            }
            break;
            case 87: /* reduce AOtherExpress4 */
            {
                ArrayList<Object> list = new87();
                push(goTo(28), list);
            }
            break;
            case 88: /* reduce AAddExpress5 */
            {
                ArrayList<Object> list = new88();
                push(goTo(29), list);
            }
            break;
            case 89: /* reduce AMinusExpress5 */
            {
                ArrayList<Object> list = new89();
                push(goTo(29), list);
            }
            break;
            case 90: /* reduce AOtherExpress5 */
            {
                ArrayList<Object> list = new90();
                push(goTo(29), list);
            }
            break;
            case 91: /* reduce AMultExpress6 */
            {
                ArrayList<Object> list = new91();
                push(goTo(30), list);
            }
            break;
            case 92: /* reduce ADivExpress6 */
            {
                ArrayList<Object> list = new92();
                push(goTo(30), list);
            }
            break;
            case 93: /* reduce AOtherExpress6 */
            {
                ArrayList<Object> list = new93();
                push(goTo(30), list);
            }
            break;
            case 94: /* reduce ANegExpress7 */
            {
                ArrayList<Object> list = new94();
                push(goTo(31), list);
            }
            break;
            case 95: /* reduce APosExpress7 */
            {
                ArrayList<Object> list = new95();
                push(goTo(31), list);
            }
            break;
            case 96: /* reduce ANotExpress7 */
            {
                ArrayList<Object> list = new96();
                push(goTo(31), list);
            }
            break;
            case 97: /* reduce AOtherExpress7 */
            {
                ArrayList<Object> list = new97();
                push(goTo(31), list);
            }
            break;
            case 98: /* reduce AAmethdotexpress81Express8 */
            {
                ArrayList<Object> list = new98();
                push(goTo(32), list);
            }
            break;
            case 99: /* reduce AAmethdotexpress82Express8 */
            {
                ArrayList<Object> list = new99();
                push(goTo(32), list);
            }
            break;
            case 100: /* reduce AAmethdotexpress83Express8 */
            {
                ArrayList<Object> list = new100();
                push(goTo(32), list);
            }
            break;
            case 101: /* reduce AAmethdotexpress84Express8 */
            {
                ArrayList<Object> list = new101();
                push(goTo(32), list);
            }
            break;
            case 102: /* reduce ANewExpress8 */
            {
                ArrayList<Object> list = new102();
                push(goTo(32), list);
            }
            break;
            case 103: /* reduce AIntExpress8 */
            {
                ArrayList<Object> list = new103();
                push(goTo(32), list);
            }
            break;
            case 104: /* reduce AStringExpress8 */
            {
                ArrayList<Object> list = new104();
                push(goTo(32), list);
            }
            break;
            case 105: /* reduce ATrueExpress8 */
            {
                ArrayList<Object> list = new105();
                push(goTo(32), list);
            }
            break;
            case 106: /* reduce AFalseExpress8 */
            {
                ArrayList<Object> list = new106();
                push(goTo(32), list);
            }
            break;
            case 107: /* reduce AIdExpress8 */
            {
                ArrayList<Object> list = new107();
                push(goTo(32), list);
            }
            break;
            case 108: /* reduce AMeExpress8 */
            {
                ArrayList<Object> list = new108();
                push(goTo(32), list);
            }
            break;
            case 109: /* reduce ANullExpress8 */
            {
                ArrayList<Object> list = new109();
                push(goTo(32), list);
            }
            break;
            case 110: /* reduce AArrayExpress8 */
            {
                ArrayList<Object> list = new110();
                push(goTo(32), list);
            }
            break;
            case 111: /* reduce AParenExpress8 */
            {
                ArrayList<Object> list = new111();
                push(goTo(32), list);
            }
            break;
            case 112: /* reduce AExpressDot */
            {
                ArrayList<Object> list = new112();
                push(goTo(33), list);
            }
            break;
            case 113: /* reduce AArray */
            {
                ArrayList<Object> list = new113();
                push(goTo(34), list);
            }
            break;
            case 114: /* reduce ATerminal$ClassDefs */
            {
                ArrayList<Object> list = new114();
                push(goTo(35), list);
            }
            break;
            case 115: /* reduce ANonTerminal$ClassDefs */
            {
                ArrayList<Object> list = new115();
                push(goTo(35), list);
            }
            break;
            case 116: /* reduce ATerminal$Linefilter */
            {
                ArrayList<Object> list = new116();
                push(goTo(36), list);
            }
            break;
            case 117: /* reduce ANonTerminal$Linefilter */
            {
                ArrayList<Object> list = new117();
                push(goTo(36), list);
            }
            break;
            case 118: /* reduce ATerminal$VarDec */
            {
                ArrayList<Object> list = new118();
                push(goTo(37), list);
            }
            break;
            case 119: /* reduce ANonTerminal$VarDec */
            {
                ArrayList<Object> list = new119();
                push(goTo(37), list);
            }
            break;
            case 120: /* reduce ATerminal$MethDef */
            {
                ArrayList<Object> list = new120();
                push(goTo(38), list);
            }
            break;
            case 121: /* reduce ANonTerminal$MethDef */
            {
                ArrayList<Object> list = new121();
                push(goTo(38), list);
            }
            break;
            case 122: /* reduce ATerminal$Argzz */
            {
                ArrayList<Object> list = new122();
                push(goTo(39), list);
            }
            break;
            case 123: /* reduce ANonTerminal$Argzz */
            {
                ArrayList<Object> list = new123();
                push(goTo(39), list);
            }
            break;
            case 124: /* reduce ATerminal$StmtEnd */
            {
                ArrayList<Object> list = new124();
                push(goTo(40), list);
            }
            break;
            case 125: /* reduce ANonTerminal$StmtEnd */
            {
                ArrayList<Object> list = new125();
                push(goTo(40), list);
            }
            break;
            case 126: /* reduce ATerminal$ExpressEnd */
            {
                ArrayList<Object> list = new126();
                push(goTo(41), list);
            }
            break;
            case 127: /* reduce ANonTerminal$ExpressEnd */
            {
                ArrayList<Object> list = new127();
                push(goTo(41), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pclassdefNode2 != null)
	{
	  listNode4.add(pclassdefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACrs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        pclassdefNode1 = (PClassDef)nodeArrayList2.get(0);
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdef1ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList6.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassdef2ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        PExtendsProd pextendsprodNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pextendsprodNode3 = (PExtendsProd)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, pextendsprodNode3, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassdef3ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassdef4ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        PExtendsProd pextendsprodNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pextendsprodNode3 = (PExtendsProd)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, pextendsprodNode3, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassdef5ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassdef6ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        PExtendsProd pextendsprodNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pextendsprodNode3 = (PExtendsProd)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, pextendsprodNode3, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAclassdef7ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAclassdef8ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        PExtendsProd pextendsprodNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pextendsprodNode3 = (PExtendsProd)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList9.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, pextendsprodNode3, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInheritsFrom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsProd pextendsprodNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList3.get(0);

        pextendsprodNode1 = new AExtendsProd(tidNode2);
        }
	nodeList.add(pextendsprodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvardec1VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDec pvardecNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvardecNode1 = new AVarDec(tidNode2, null, null);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAvardec2VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDec pvardecNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvardecNode1 = new AVarDec(tidNode2, ptypeNode3, null);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAvardec3VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDec pvardecNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pvardecNode1 = new AVarDec(tidNode2, null, pexpressionNode4);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAvardec4VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDec pvardecNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pvardecNode1 = new AVarDec(tidNode2, ptypeNode3, pexpressionNode4);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATypeDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ABooleanTypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIntTypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AStringTypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAarraytypename1TypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAarraytypename2TypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACustomTypeName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new ACustomType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATypeInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAmethdef1MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList9.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode4, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAmethdef2MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tidNode8 = (TId)nodeArrayList10.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode5, listNode6, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAmethdef3MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        pmethtypeNode2 = (PMethType)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList10.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode4, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAmethdef4MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        pmethtypeNode2 = (PMethType)nodeArrayList5.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tidNode8 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode5, listNode6, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAmethdef5MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tidNode8 = (TId)nodeArrayList10.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode4, listNode6, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAmethdef6MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode5, listNode7, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAmethdef7MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        pmethtypeNode2 = (PMethType)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tidNode8 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode4, listNode6, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAmethdef8MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        pmethtypeNode2 = (PMethType)nodeArrayList5.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode5, listNode7, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAmethdef9MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList10.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode4, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAmethdef10MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode5, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAmethdef11MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TId tidNode8;
        pmethtypeNode2 = (PMethType)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode4, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAmethdef12MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        pmethtypeNode2 = (PMethType)nodeArrayList5.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode5, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAmethdef13MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode4, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAmethdef14MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TId tidNode10;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList12.get(0);

        pmethdefNode1 = new AMethDef(null, tidNode3, listNode5, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAmethdef15MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TId tidNode9;
        pmethtypeNode2 = (PMethType)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode4, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAmethdef16MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethDef pmethdefNode1;
        {
            // Block
        PMethType pmethtypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TId tidNode10;
        pmethtypeNode2 = (PMethType)nodeArrayList5.get(0);
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList13.get(0);

        pmethdefNode1 = new AMethDef(pmethtypeNode2, tidNode3, listNode5, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMethType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethType pmethtypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        pmethtypeNode1 = new AMethType(ptypeNode2);
        }
	nodeList.add(pmethtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
	if(pargumentNode1 != null)
	{
	  listNode2.add(pargumentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pargumentNode1 != null)
	{
	  listNode3.add(pargumentNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AArgzz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList2.get(0);
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pargumentNode1 = new AArgument(tidNode2, ptypeNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAstmtlst1StmtLst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAstmtlst2StmtLst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pstatementNode1 != null)
	{
	  listNode3.add(pstatementNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStmtEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList2.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AIfStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACallStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAssignStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALoopStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAifstmt1IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        {
            // Block
        }
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AIfStatement(listNode2, listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAifstmt2IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        pexpressionNode5 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AIfStatement(listNode3, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAifstmt3IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpression pexpressionNode5;
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AIfStatement(listNode2, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAifstmt4IfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExpression pexpressionNode6;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpressionNode6 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AIfStatement(listNode3, listNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAelsestmt1ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAelsestmt2ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAcallstmt1CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pstatementNode1 = new AMethodCallStatement(null, tidNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAcallstmt2CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pstatementNode1 = new AMethodCallStatement(pexpressionNode2, tidNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAcallstmt3CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AMethodCallStatement(null, tidNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAcallstmt4CallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AMethodCallStatement(pexpressionNode2, tidNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignOpStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAloopstmt1LoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExpression pexpressionNode3;
        {
            // Block
        }
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAloopstmt2LoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpression pexpressionNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAexpresslst1ExpressLst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAexpresslst2ExpressLst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AExpressEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AOrExpress1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AOtherExpress1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAndExpress2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AOtherExpress2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEqualsExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqualExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AGreaterExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGreaterExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AGreaterThanExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGreaterThanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ALesserExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALesserExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ALessThanExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALessThanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AOtherExpress3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AConcatExpress4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AConcatExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AOtherExpress4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAddExpress5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AMinusExpress5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AOtherExpress5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AMultExpress6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ADivExpress6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AOtherExpress6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANegExpress7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce APosExpress7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APosExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ANotExpress7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AOtherExpress7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AAmethdotexpress81Express8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethExprExpression(null, tidNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AAmethdotexpress82Express8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethExprExpression(pexpressionNode2, tidNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAmethdotexpress83Express8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethExprExpression(null, tidNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AAmethdotexpress84Express8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethExprExpression(pexpressionNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANewExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AIntExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntExpression(tintliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AStringExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStrLit tstrlitNode2;
        tstrlitNode2 = (TStrLit)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstrlitNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATrueExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new ATrueExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AFalseExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new AFalseExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AIdExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AMeExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new AMeExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ANullExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new ANullExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce AArrayExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AArrexpExpression(tidNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce AParenExpress8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce AExpressDot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ATerminal$ClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDef pclassdefNode1;
        pclassdefNode1 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode1 != null)
	{
	  listNode2.add(pclassdefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ANonTerminal$ClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDef pclassdefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ATerminal$Linefilter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TLinefilter tlinefilterNode1;
        tlinefilterNode1 = (TLinefilter)nodeArrayList1.get(0);
	if(tlinefilterNode1 != null)
	{
	  listNode2.add(tlinefilterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ANonTerminal$Linefilter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TLinefilter tlinefilterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tlinefilterNode2 = (TLinefilter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tlinefilterNode2 != null)
	{
	  listNode3.add(tlinefilterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ATerminal$VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDec pvardecNode1;
        pvardecNode1 = (PVarDec)nodeArrayList1.get(0);
	if(pvardecNode1 != null)
	{
	  listNode2.add(pvardecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ANonTerminal$VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDec pvardecNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardecNode2 = (PVarDec)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardecNode2 != null)
	{
	  listNode3.add(pvardecNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ATerminal$MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethDef pmethdefNode1;
        pmethdefNode1 = (PMethDef)nodeArrayList1.get(0);
	if(pmethdefNode1 != null)
	{
	  listNode2.add(pmethdefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ANonTerminal$MethDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethDef pmethdefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethdefNode2 = (PMethDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethdefNode2 != null)
	{
	  listNode3.add(pmethdefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ATerminal$Argzz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
	if(pargumentNode1 != null)
	{
	  listNode2.add(pargumentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ANonTerminal$Argzz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgument pargumentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentNode2 = (PArgument)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentNode2 != null)
	{
	  listNode3.add(pargumentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ATerminal$StmtEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ANonTerminal$StmtEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce ATerminal$ExpressEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce ANonTerminal$ExpressEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, {48, SHIFT, 2}, },
			{{-1, ERROR, 1}, {44, SHIFT, 7}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 3}, {51, ACCEPT, -1}, },
			{{-1, ERROR, 4}, {3, SHIFT, 1}, },
			{{-1, REDUCE, 0}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 8}, {48, SHIFT, 12}, },
			{{-1, ERROR, 7}, {8, SHIFT, 13}, {10, SHIFT, 14}, },
			{{-1, REDUCE, 1}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 4}, {3, SHIFT, 1}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 2}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 13}, {6, SHIFT, 21}, },
			{{-1, ERROR, 14}, {48, SHIFT, 2}, },
			{{-1, ERROR, 15}, {10, SHIFT, 23}, },
			{{-1, REDUCE, 5}, {3, SHIFT, 1}, },
			{{-1, REDUCE, 3}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, {3, SHIFT, 1}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 21}, {44, SHIFT, 25}, },
			{{-1, ERROR, 22}, {5, SHIFT, 26}, {44, SHIFT, 27}, },
			{{-1, ERROR, 23}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {3, SHIFT, 1}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 26}, {44, SHIFT, 33}, },
			{{-1, ERROR, 27}, {24, SHIFT, 34}, {25, SHIFT, 35}, {33, SHIFT, 36}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 30}, {5, SHIFT, 40}, {44, SHIFT, 27}, },
			{{-1, ERROR, 31}, {5, SHIFT, 43}, {44, SHIFT, 44}, },
			{{-1, ERROR, 32}, {5, SHIFT, 46}, {44, SHIFT, 27}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 34}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 35}, {26, SHIFT, 71}, {44, SHIFT, 72}, },
			{{-1, ERROR, 36}, {0, SHIFT, 75}, {1, SHIFT, 76}, {9, SHIFT, 77}, {44, SHIFT, 78}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 38}, {24, SHIFT, 34}, {48, SHIFT, 2}, },
			{{-1, ERROR, 39}, {48, SHIFT, 2}, },
			{{-1, ERROR, 40}, {44, SHIFT, 83}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 42}, {5, SHIFT, 84}, {44, SHIFT, 44}, },
			{{-1, ERROR, 43}, {44, SHIFT, 85}, },
			{{-1, ERROR, 44}, {25, SHIFT, 35}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 46}, {44, SHIFT, 86}, },
			{{-1, ERROR, 47}, {5, SHIFT, 87}, {44, SHIFT, 27}, },
			{{-1, ERROR, 48}, {5, SHIFT, 89}, {44, SHIFT, 44}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 50}, {44, SHIFT, 90}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 54}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 55}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 56}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 57}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 107}, {25, SHIFT, 95}, {27, SHIFT, 96}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 75}, {20, SHIFT, 97}, },
			{{-1, REDUCE, 77}, {19, SHIFT, 98}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 85}, {34, SHIFT, 99}, {39, SHIFT, 100}, {40, SHIFT, 101}, {41, SHIFT, 102}, {42, SHIFT, 103}, {43, SHIFT, 104}, },
			{{-1, REDUCE, 87}, {35, SHIFT, 105}, {36, SHIFT, 106}, },
			{{-1, REDUCE, 90}, {37, SHIFT, 107}, {38, SHIFT, 108}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 97}, {23, SHIFT, 109}, },
			{{-1, ERROR, 70}, {44, SHIFT, 110}, },
			{{-1, ERROR, 71}, {10, SHIFT, 111}, {33, SHIFT, 36}, },
			{{-1, ERROR, 72}, {33, SHIFT, 36}, },
			{{-1, ERROR, 73}, {26, SHIFT, 115}, },
			{{-1, REDUCE, 48}, {32, SHIFT, 116}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 23}, {27, SHIFT, 119}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 81}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 84}, {44, SHIFT, 121}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 87}, {44, SHIFT, 122}, },
			{{-1, ERROR, 88}, {5, SHIFT, 123}, {44, SHIFT, 44}, },
			{{-1, ERROR, 89}, {44, SHIFT, 124}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 96}, {23, SHIFT, 109}, },
			{{-1, ERROR, 92}, {26, SHIFT, 125}, },
			{{-1, REDUCE, 95}, {23, SHIFT, 109}, },
			{{-1, REDUCE, 94}, {23, SHIFT, 109}, },
			{{-1, ERROR, 95}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {26, SHIFT, 126}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 96}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 97}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 98}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 99}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 100}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 101}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 102}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 103}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 104}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 105}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 106}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 107}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 108}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 110}, {25, SHIFT, 142}, },
			{{-1, ERROR, 111}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 113}, {10, SHIFT, 144}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 115}, {10, SHIFT, 145}, {33, SHIFT, 36}, },
			{{-1, ERROR, 116}, {44, SHIFT, 72}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 49}, {32, SHIFT, 116}, },
			{{-1, ERROR, 119}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {28, SHIFT, 149}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 123}, {44, SHIFT, 151}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 127}, {26, SHIFT, 152}, },
			{{-1, REDUCE, 72}, {31, SHIFT, 153}, },
			{{-1, ERROR, 129}, {28, SHIFT, 156}, },
			{{-1, REDUCE, 76}, {19, SHIFT, 98}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 86}, {35, SHIFT, 105}, {36, SHIFT, 106}, },
			{{-1, REDUCE, 81}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 83}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 82}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 84}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 80}, {34, SHIFT, 99}, },
			{{-1, REDUCE, 88}, {37, SHIFT, 107}, {38, SHIFT, 108}, },
			{{-1, REDUCE, 89}, {37, SHIFT, 107}, {38, SHIFT, 108}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 142}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {26, SHIFT, 157}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 143}, {2, SHIFT, 159}, {44, SHIFT, 160}, },
			{{-1, ERROR, 144}, {48, SHIFT, 2}, },
			{{-1, ERROR, 145}, {48, SHIFT, 2}, },
			{{-1, ERROR, 146}, {10, SHIFT, 164}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 150}, {28, SHIFT, 165}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 153}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 73}, {31, SHIFT, 153}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 158}, {26, SHIFT, 168}, },
			{{-1, ERROR, 159}, {48, SHIFT, 2}, },
			{{-1, ERROR, 160}, {24, SHIFT, 34}, {33, SHIFT, 36}, {48, SHIFT, 2}, },
			{{-1, ERROR, 161}, {2, SHIFT, 170}, {44, SHIFT, 160}, },
			{{-1, ERROR, 162}, {2, SHIFT, 171}, {44, SHIFT, 160}, },
			{{-1, ERROR, 163}, {2, SHIFT, 173}, {44, SHIFT, 160}, },
			{{-1, ERROR, 164}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 169}, {5, SHIFT, 176}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 170}, {48, SHIFT, 2}, },
			{{-1, ERROR, 171}, {48, SHIFT, 2}, },
			{{-1, ERROR, 172}, {2, SHIFT, 190}, {44, SHIFT, 160}, },
			{{-1, ERROR, 173}, {48, SHIFT, 2}, },
			{{-1, ERROR, 174}, {2, SHIFT, 192}, {44, SHIFT, 160}, },
			{{-1, ERROR, 175}, {2, SHIFT, 193}, {44, SHIFT, 160}, },
			{{-1, ERROR, 176}, {44, SHIFT, 195}, },
			{{-1, ERROR, 177}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 178}, {15, SHIFT, 197}, },
			{{-1, REDUCE, 107}, {24, SHIFT, 198}, {25, SHIFT, 199}, {27, SHIFT, 96}, },
			{{-1, ERROR, 180}, {5, SHIFT, 200}, },
			{{-1, ERROR, 181}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 186}, {23, SHIFT, 109}, },
			{{-1, ERROR, 187}, {44, SHIFT, 204}, },
			{{-1, ERROR, 188}, {5, SHIFT, 205}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 189}, {5, SHIFT, 207}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 190}, {48, SHIFT, 2}, },
			{{-1, ERROR, 191}, {5, SHIFT, 210}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 192}, {48, SHIFT, 2}, },
			{{-1, ERROR, 193}, {48, SHIFT, 2}, },
			{{-1, ERROR, 194}, {2, SHIFT, 214}, {44, SHIFT, 160}, },
			{{-1, ERROR, 195}, {48, SHIFT, 2}, },
			{{-1, ERROR, 196}, {16, SHIFT, 216}, },
			{{-1, ERROR, 197}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 198}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 199}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {26, SHIFT, 219}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 200}, {44, SHIFT, 221}, },
			{{-1, REDUCE, 52}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 203}, {48, SHIFT, 2}, },
			{{-1, ERROR, 204}, {25, SHIFT, 225}, },
			{{-1, ERROR, 205}, {44, SHIFT, 226}, },
			{{-1, ERROR, 206}, {5, SHIFT, 227}, },
			{{-1, ERROR, 207}, {44, SHIFT, 228}, },
			{{-1, ERROR, 208}, {5, SHIFT, 229}, },
			{{-1, ERROR, 209}, {5, SHIFT, 230}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 210}, {44, SHIFT, 232}, },
			{{-1, ERROR, 211}, {5, SHIFT, 233}, },
			{{-1, ERROR, 212}, {5, SHIFT, 234}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 213}, {5, SHIFT, 236}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 214}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 216}, {48, SHIFT, 2}, },
			{{-1, ERROR, 217}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 98}, {48, REDUCE, 65}, },
			{{-1, ERROR, 220}, {26, SHIFT, 241}, },
			{{-1, ERROR, 221}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 225}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {21, SHIFT, 54}, {25, SHIFT, 55}, {26, SHIFT, 243}, {35, SHIFT, 56}, {36, SHIFT, 57}, {44, SHIFT, 58}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 226}, {48, SHIFT, 2}, },
			{{-1, ERROR, 227}, {44, SHIFT, 246}, },
			{{-1, ERROR, 228}, {48, SHIFT, 2}, },
			{{-1, ERROR, 229}, {44, SHIFT, 248}, },
			{{-1, ERROR, 230}, {44, SHIFT, 249}, },
			{{-1, ERROR, 231}, {5, SHIFT, 250}, },
			{{-1, ERROR, 232}, {48, SHIFT, 2}, },
			{{-1, ERROR, 233}, {44, SHIFT, 252}, },
			{{-1, ERROR, 234}, {44, SHIFT, 253}, },
			{{-1, ERROR, 235}, {5, SHIFT, 254}, },
			{{-1, ERROR, 236}, {44, SHIFT, 255}, },
			{{-1, ERROR, 237}, {5, SHIFT, 256}, },
			{{-1, ERROR, 238}, {5, SHIFT, 257}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 239}, {4, SHIFT, 259}, {5, SHIFT, 260}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, ERROR, 240}, {5, SHIFT, 263}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 100}, {48, REDUCE, 67}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 99}, {48, REDUCE, 66}, },
			{{-1, ERROR, 244}, {26, SHIFT, 265}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 246}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 248}, {48, SHIFT, 2}, },
			{{-1, ERROR, 249}, {48, SHIFT, 2}, },
			{{-1, ERROR, 250}, {44, SHIFT, 269}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 252}, {48, SHIFT, 2}, },
			{{-1, ERROR, 253}, {48, SHIFT, 2}, },
			{{-1, ERROR, 254}, {44, SHIFT, 272}, },
			{{-1, ERROR, 255}, {48, SHIFT, 2}, },
			{{-1, ERROR, 256}, {44, SHIFT, 274}, },
			{{-1, ERROR, 257}, {44, SHIFT, 275}, },
			{{-1, ERROR, 258}, {5, SHIFT, 276}, },
			{{-1, ERROR, 259}, {48, SHIFT, 2}, },
			{{-1, ERROR, 260}, {7, SHIFT, 278}, },
			{{-1, ERROR, 261}, {4, SHIFT, 259}, {5, SHIFT, 279}, },
			{{-1, ERROR, 262}, {5, SHIFT, 281}, },
			{{-1, ERROR, 263}, {11, SHIFT, 282}, },
			{{-1, ERROR, 264}, {5, SHIFT, 283}, },
			{{-1, REDUCE, 101}, {48, REDUCE, 68}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 269}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 272}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 274}, {48, SHIFT, 2}, },
			{{-1, ERROR, 275}, {48, SHIFT, 2}, },
			{{-1, ERROR, 276}, {44, SHIFT, 288}, },
			{{-1, REDUCE, 63}, {7, SHIFT, 177}, {11, SHIFT, 178}, {12, SHIFT, 49}, {13, SHIFT, 50}, {14, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {25, SHIFT, 55}, {44, SHIFT, 179}, {45, SHIFT, 59}, {46, SHIFT, 60}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 279}, {7, SHIFT, 290}, },
			{{-1, ERROR, 280}, {5, SHIFT, 291}, },
			{{-1, ERROR, 281}, {7, SHIFT, 292}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 283}, {11, SHIFT, 293}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 288}, {48, SHIFT, 2}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 291}, {7, SHIFT, 295}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 62}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 37}, {0, 4}, {5, 9}, {8, 16}, {11, 19}, {14, 22}, {17, 24}, {23, 32}, {38, 80}, {39, 82}, {81, 120}, {111, 143}, {144, 162}, {145, 163}, {159, 169}, {164, 175}, {170, 188}, {171, 189}, {173, 191}, {181, 201}, {190, 209}, {192, 212}, {193, 213}, {195, 215}, {203, 223}, {214, 238}, {216, 239}, {217, 240}, {221, 242}, {226, 245}, {228, 247}, {232, 251}, {246, 266}, {248, 267}, {249, 268}, {252, 270}, {253, 271}, {255, 273}, {259, 277}, {269, 284}, {272, 285}, {274, 286}, {275, 287}, {288, 294}, },
			{{-1, 10}, {11, 20}, {17, 20}, },
			{{-1, 18}, {0, 5}, {4, 8}, },
			{{-1, 15}, },
			{{-1, 28}, {30, 41}, {47, 41}, {161, 41}, {172, 41}, {174, 41}, {194, 41}, },
			{{-1, 112}, {27, 38}, {72, 114}, {160, 38}, },
			{{-1, 79}, },
			{{-1, 39}, {38, 81}, },
			{{-1, 29}, {31, 45}, {42, 45}, {48, 45}, {88, 45}, },
			{{-1, 113}, {115, 146}, },
			{{-1, 73}, },
			{{-1, 117}, {118, 148}, },
			{{-1, 74}, {116, 147}, },
			{{-1, 180}, {188, 206}, {189, 208}, {191, 211}, {209, 231}, {212, 235}, {213, 237}, {238, 258}, {239, 261}, {240, 264}, {277, 289}, },
			{{-1, 202}, {203, 224}, },
			{{-1, 181}, {201, 222}, {223, 222}, },
			{{-1, 182}, },
			{{-1, 262}, {261, 280}, },
			{{-1, 183}, },
			{{-1, 184}, },
			{{-1, 185}, },
			{{-1, 127}, {142, 158}, {199, 220}, {225, 244}, },
			{{-1, 154}, {155, 167}, },
			{{-1, 128}, {34, 61}, {55, 92}, {96, 129}, {119, 150}, {153, 166}, {177, 196}, {197, 217}, {198, 218}, },
			{{-1, 62}, },
			{{-1, 63}, {97, 130}, },
			{{-1, 64}, {98, 131}, },
			{{-1, 65}, {100, 133}, {101, 134}, {102, 135}, {103, 136}, {104, 137}, },
			{{-1, 66}, {99, 132}, },
			{{-1, 67}, {105, 138}, {106, 139}, },
			{{-1, 68}, {107, 140}, {108, 141}, },
			{{-1, 69}, {54, 91}, {56, 93}, {57, 94}, {169, 186}, {188, 186}, {189, 186}, {191, 186}, {201, 186}, {209, 186}, {212, 186}, {213, 186}, {223, 186}, {238, 186}, {239, 186}, {240, 186}, {277, 186}, },
			{{-1, 70}, {169, 187}, {188, 187}, {189, 187}, {191, 187}, {201, 187}, {209, 187}, {212, 187}, {213, 187}, {223, 187}, {238, 187}, {239, 187}, {240, 187}, {277, 187}, },
			{{-1, -1}, },
			{{-1, 11}, {8, 17}, },
			{{-1, 6}, },
			{{-1, 30}, {32, 47}, {143, 161}, {162, 172}, {163, 174}, {175, 194}, },
			{{-1, 31}, {30, 42}, {32, 48}, {47, 88}, },
			{{-1, 118}, },
			{{-1, 203}, },
			{{-1, 155}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', linefilter",
			"expecting: id",
			"expecting: 'begin', 'class', 'else', 'end', 'if', 'loop', 'me', 'new', 'null', 'true', 'false', '(', id, int literal, str lit, linefilter, EOF",
			"expecting: EOF",
			"expecting: 'class'",
			"expecting: linefilter, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: 'class', EOF",
			"expecting: 'from'",
			"expecting: linefilter",
			"expecting: 'is'",
			"expecting: 'end', id",
			"expecting: ':=', '(', ':', linefilter",
			"expecting: 'begin', 'end', id",
			"expecting: 'me', 'new', 'null', 'true', 'false', 'not', '(', '+', '-', id, int literal, str lit",
			"expecting: ')', id",
			"expecting: 'string', 'boolean', 'int', id",
			"expecting: ':=', linefilter",
			"expecting: '('",
			"expecting: 'then', 'and', 'or', '.', ')', ']', ',', '&', '+', '-', '*', '/', '>', '<', '>=', '<=', '=', linefilter",
			"expecting: 'me', 'new', 'null', 'true', 'false', '(', id, int literal, str lit",
			"expecting: 'then', 'and', 'or', '.', '(', ')', '[', ']', ',', '&', '+', '-', '*', '/', '>', '<', '>=', '<=', '=', linefilter",
			"expecting: 'then', 'or', ')', ']', ',', linefilter",
			"expecting: 'then', 'and', 'or', ')', ']', ',', linefilter",
			"expecting: 'then', 'and', 'or', ')', ']', ',', '&', '>', '<', '>=', '<=', '=', linefilter",
			"expecting: 'then', 'and', 'or', ')', ']', ',', '&', '+', '-', '>', '<', '>=', '<=', '=', linefilter",
			"expecting: 'then', 'and', 'or', ')', ']', ',', '&', '+', '-', '*', '/', '>', '<', '>=', '<=', '=', linefilter",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'is', ':=', ')', '[', ';', linefilter",
			"expecting: 'me', 'new', 'null', 'true', 'false', 'not', '(', ')', '+', '-', id, int literal, str lit",
			"expecting: 'me', 'new', 'null', 'true', 'false', 'not', '(', ']', '+', '-', id, int literal, str lit",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: 'then', 'and', 'or', ')', ']', ',', '&', linefilter",
			"expecting: 'begin', id",
			"expecting: ':=', ':', linefilter",
			"expecting: 'end', 'if', 'loop', 'me', 'new', 'null', 'true', 'false', '(', id, int literal, str lit",
			"expecting: 'while'",
			"expecting: '.', ':=', '(', '['",
			"expecting: 'end'",
			"expecting: '.'",
			"expecting: 'then'",
			"expecting: 'else', 'end', 'if', 'loop', 'me', 'new', 'null', 'true', 'false', '(', id, int literal, str lit",
			"expecting: '.', linefilter",
			"expecting: 'if'",
			"expecting: 'else', 'end'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 2, 6, 5, 7, 5, 5, 2, 8, 9, 10, 7, 5, 5, 7, 5, 1, 11, 9, 7, 10, 1, 12, 13, 11, 11, 11, 11, 5, 14, 15, 16, 13, 17, 9, 1, 13, 11, 1, 18, 11, 1, 11, 11, 19, 1, 19, 19, 19, 20, 14, 20, 20, 21, 19, 19, 9, 22, 23, 23, 24, 25, 26, 26, 19, 1, 27, 28, 29, 30, 31, 31, 31, 31, 31, 13, 9, 13, 5, 1, 5, 5, 1, 11, 1, 19, 19, 29, 19, 19, 32, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1, 18, 9, 10, 10, 30, 27, 1, 30, 30, 33, 13, 5, 5, 1, 5, 19, 19, 29, 34, 35, 23, 23, 25, 36, 36, 36, 36, 36, 26, 26, 26, 26, 32, 37, 9, 9, 10, 30, 30, 31, 35, 5, 19, 14, 34, 34, 19, 19, 29, 9, 38, 37, 37, 37, 9, 31, 34, 34, 19, 39, 9, 9, 37, 9, 37, 37, 1, 14, 40, 41, 42, 9, 9, 9, 9, 9, 43, 1, 39, 39, 9, 39, 9, 9, 37, 9, 44, 14, 14, 32, 1, 45, 9, 9, 18, 1, 42, 1, 42, 39, 1, 42, 39, 39, 9, 11, 9, 9, 9, 46, 29, 9, 9, 45, 9, 32, 9, 1, 9, 1, 1, 42, 9, 1, 1, 42, 1, 42, 39, 45, 39, 46, 11, 46, 29, 11, 9, 11, 9, 9, 1, 11, 9, 9, 1, 9, 1, 1, 42, 9, 47, 48, 42, 49, 42, 46, 11, 11, 11, 9, 11, 11, 9, 11, 9, 9, 1, 39, 9, 47, 42, 47, 9, 49, 11, 11, 11, 11, 9, 42, 9, 47, 9, 9, 11, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
