/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethExprExpression extends PExpression
{
    private PExpression _lhs_;
    private TId _id_;
    private final LinkedList<PExpression> _rhs_ = new LinkedList<PExpression>();

    public AMethExprExpression()
    {
        // Constructor
    }

    public AMethExprExpression(
        @SuppressWarnings("hiding") PExpression _lhs_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _rhs_)
    {
        // Constructor
        setLhs(_lhs_);

        setId(_id_);

        setRhs(_rhs_);

    }

    @Override
    public Object clone()
    {
        return new AMethExprExpression(
            cloneNode(this._lhs_),
            cloneNode(this._id_),
            cloneList(this._rhs_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethExprExpression(this);
    }

    public PExpression getLhs()
    {
        return this._lhs_;
    }

    public void setLhs(PExpression node)
    {
        if(this._lhs_ != null)
        {
            this._lhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lhs_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PExpression> getRhs()
    {
        return this._rhs_;
    }

    public void setRhs(List<?> list)
    {
        for(PExpression e : this._rhs_)
        {
            e.parent(null);
        }
        this._rhs_.clear();

        for(Object obj_e : list)
        {
            PExpression e = (PExpression) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._rhs_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lhs_)
            + toString(this._id_)
            + toString(this._rhs_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lhs_ == child)
        {
            this._lhs_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._rhs_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lhs_ == oldChild)
        {
            setLhs((PExpression) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PExpression> i = this._rhs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
