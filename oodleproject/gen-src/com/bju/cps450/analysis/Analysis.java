/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAClassDef(AClassDef node);
    void caseAExtendsProd(AExtendsProd node);
    void caseAVarDec(AVarDec node);
    void caseAMethDef(AMethDef node);
    void caseAMethType(AMethType node);
    void caseAIntType(AIntType node);
    void caseABooleanType(ABooleanType node);
    void caseAStringType(AStringType node);
    void caseAArrayType(AArrayType node);
    void caseACustomType(ACustomType node);
    void caseAArgument(AArgument node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAAssignOpStatement(AAssignOpStatement node);
    void caseAMethodCallStatement(AMethodCallStatement node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAGreaterThanExpression(AGreaterThanExpression node);
    void caseAEqualExpression(AEqualExpression node);
    void caseAGreaterExpression(AGreaterExpression node);
    void caseALessThanExpression(ALessThanExpression node);
    void caseALesserExpression(ALesserExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAConcatExpression(AConcatExpression node);
    void caseANotExpression(ANotExpression node);
    void caseANegExpression(ANegExpression node);
    void caseAPosExpression(APosExpression node);
    void caseANewExpression(ANewExpression node);
    void caseAIntExpression(AIntExpression node);
    void caseAStringExpression(AStringExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseAMeExpression(AMeExpression node);
    void caseANullExpression(ANullExpression node);
    void caseAArrexpExpression(AArrexpExpression node);
    void caseAMethExprExpression(AMethExprExpression node);

    void caseTString(TString node);
    void caseTContinuation(TContinuation node);
    void caseTBool(TBool node);
    void caseTBegin(TBegin node);
    void caseTClasskey(TClasskey node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTWhile(TWhile node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTTab(TTab node);
    void caseTDot(TDot node);
    void caseTAssignOp(TAssignOp node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLCurly(TLCurly node);
    void caseTRCurly(TRCurly node);
    void caseTComma(TComma node);
    void caseTSemiColon(TSemiColon node);
    void caseTColon(TColon node);
    void caseTConcat(TConcat node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTGthan(TGthan node);
    void caseTLthan(TLthan node);
    void caseTGthanEq(TGthanEq node);
    void caseTLthanEq(TLthanEq node);
    void caseTEqual(TEqual node);
    void caseTSpctab(TSpctab node);
    void caseTId(TId node);
    void caseTComment(TComment node);
    void caseTIntLiteral(TIntLiteral node);
    void caseTStrLit(TStrLit node);
    void caseTIllegalStrLit(TIllegalStrLit node);
    void caseTLinefilter(TLinefilter node);
    void caseTUntermStr(TUntermStr node);
    void caseTUnknownChar(TUnknownChar node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
