/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<PClassDef> copy = new ArrayList<PClassDef>(node.getClassDef());
            Collections.reverse(copy);
            for(PClassDef e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAClassDef(AClassDef node)
    {
        defaultIn(node);
    }

    public void outAClassDef(AClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        inAClassDef(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PMethDef> copy = new ArrayList<PMethDef>(node.getMethDef());
            Collections.reverse(copy);
            for(PMethDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDec> copy = new ArrayList<PVarDec>(node.getVarDec());
            Collections.reverse(copy);
            for(PVarDec e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExtendsProd() != null)
        {
            node.getExtendsProd().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAClassDef(node);
    }

    public void inAExtendsProd(AExtendsProd node)
    {
        defaultIn(node);
    }

    public void outAExtendsProd(AExtendsProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsProd(AExtendsProd node)
    {
        inAExtendsProd(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAExtendsProd(node);
    }

    public void inAVarDec(AVarDec node)
    {
        defaultIn(node);
    }

    public void outAVarDec(AVarDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDec(AVarDec node)
    {
        inAVarDec(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarDec(node);
    }

    public void inAMethDef(AMethDef node)
    {
        defaultIn(node);
    }

    public void outAMethDef(AMethDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethDef(AMethDef node)
    {
        inAMethDef(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDec> copy = new ArrayList<PVarDec>(node.getVarDec());
            Collections.reverse(copy);
            for(PVarDec e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            Collections.reverse(copy);
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getMethType() != null)
        {
            node.getMethType().apply(this);
        }
        outAMethDef(node);
    }

    public void inAMethType(AMethType node)
    {
        defaultIn(node);
    }

    public void outAMethType(AMethType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethType(AMethType node)
    {
        inAMethType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAMethType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABooleanType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayType(node);
    }

    public void inACustomType(ACustomType node)
    {
        defaultIn(node);
    }

    public void outACustomType(ACustomType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomType(ACustomType node)
    {
        inACustomType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACustomType(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getFalse());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getTrue());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileStatement(node);
    }

    public void inAAssignOpStatement(AAssignOpStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignOpStatement(AAssignOpStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOpStatement(AAssignOpStatement node)
    {
        inAAssignOpStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignOpStatement(node);
    }

    public void inAMethodCallStatement(AMethodCallStatement node)
    {
        defaultIn(node);
    }

    public void outAMethodCallStatement(AMethodCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallStatement(AMethodCallStatement node)
    {
        inAMethodCallStatement(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParams());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMethodCallStatement(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanExpression(AGreaterThanExpression node)
    {
        inAGreaterThanExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAGreaterThanExpression(node);
    }

    public void inAEqualExpression(AEqualExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualExpression(AEqualExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExpression(AEqualExpression node)
    {
        inAEqualExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAEqualExpression(node);
    }

    public void inAGreaterExpression(AGreaterExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterExpression(AGreaterExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExpression(AGreaterExpression node)
    {
        inAGreaterExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAGreaterExpression(node);
    }

    public void inALessThanExpression(ALessThanExpression node)
    {
        defaultIn(node);
    }

    public void outALessThanExpression(ALessThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanExpression(ALessThanExpression node)
    {
        inALessThanExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outALessThanExpression(node);
    }

    public void inALesserExpression(ALesserExpression node)
    {
        defaultIn(node);
    }

    public void outALesserExpression(ALesserExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesserExpression(ALesserExpression node)
    {
        inALesserExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outALesserExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outADivExpression(node);
    }

    public void inAConcatExpression(AConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAConcatExpression(AConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatExpression(AConcatExpression node)
    {
        inAConcatExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAConcatExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inANegExpression(ANegExpression node)
    {
        defaultIn(node);
    }

    public void outANegExpression(ANegExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpression(ANegExpression node)
    {
        inANegExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANegExpression(node);
    }

    public void inAPosExpression(APosExpression node)
    {
        defaultIn(node);
    }

    public void outAPosExpression(APosExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpression(APosExpression node)
    {
        inAPosExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPosExpression(node);
    }

    public void inANewExpression(ANewExpression node)
    {
        defaultIn(node);
    }

    public void outANewExpression(ANewExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpression(ANewExpression node)
    {
        inANewExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANewExpression(node);
    }

    public void inAIntExpression(AIntExpression node)
    {
        defaultIn(node);
    }

    public void outAIntExpression(AIntExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpression(AIntExpression node)
    {
        inAIntExpression(node);
        if(node.getIntLiteral() != null)
        {
            node.getIntLiteral().apply(this);
        }
        outAIntExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getStrLit() != null)
        {
            node.getStrLit().apply(this);
        }
        outAStringExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        outAFalseExpression(node);
    }

    public void inAIdExpression(AIdExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExpression(AIdExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpression(AIdExpression node)
    {
        inAIdExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExpression(node);
    }

    public void inAMeExpression(AMeExpression node)
    {
        defaultIn(node);
    }

    public void outAMeExpression(AMeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpression(AMeExpression node)
    {
        inAMeExpression(node);
        outAMeExpression(node);
    }

    public void inANullExpression(ANullExpression node)
    {
        defaultIn(node);
    }

    public void outANullExpression(ANullExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpression(ANullExpression node)
    {
        inANullExpression(node);
        outANullExpression(node);
    }

    public void inAArrexpExpression(AArrexpExpression node)
    {
        defaultIn(node);
    }

    public void outAArrexpExpression(AArrexpExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrexpExpression(AArrexpExpression node)
    {
        inAArrexpExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrexpExpression(node);
    }

    public void inAMethExprExpression(AMethExprExpression node)
    {
        defaultIn(node);
    }

    public void outAMethExprExpression(AMethExprExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethExprExpression(AMethExprExpression node)
    {
        inAMethExprExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getRhs());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAMethExprExpression(node);
    }
}
